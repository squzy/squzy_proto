syntax = 'proto3';

package squzy.v1.storage;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "proto/v1/squzy_agent_server.proto";
import "proto/v1/squzy_application_monitoring.proto";
import "proto/v1/squzy_monitoring.proto";

option go_package = "api";

service Storage {
  //To save info about checkers
  // protolint:disable:next MAX_LINE_LENGTH
  rpc SaveResponseFromScheduler (SchedulerResponse) returns (google.protobuf.Empty);
  //To save info about agent
  // protolint:disable:next MAX_LINE_LENGTH
  rpc SaveResponseFromAgent (squzy.v1.agent.Metric) returns (google.protobuf.Empty);
  // Save information from application monitoring
  // protolint:disable:next MAX_LINE_LENGTH
  rpc SaveTransaction(squzy.v1.monitoring.TransactionInfo) returns (google.protobuf.Empty);
  // protolint:disable:next MAX_LINE_LENGTH
  rpc GetSchedulerInformation (GetSchedulerInformationRequest) returns (GetSchedulerInformationResponse);
  //To send info about about agent
  // protolint:disable:next MAX_LINE_LENGTH
  rpc GetAgentInformation (GetAgentInformationRequest) returns (GetAgentInformationResponse);
  // Return grouped transactions via group
  // protolint:disable:next MAX_LINE_LENGTH
  rpc GetTransactionsGroup(GetTransactionGroupRequest) returns (GetTransactionGroupResponse);
  // Returns list of transaction via filter
  // protolint:disable:next MAX_LINE_LENGTH
  rpc GetTransactions(GetTransactionsRequest) returns (GetTransactionsResponse);
  // protolint:disable:next MAX_LINE_LENGTH
  rpc GetTransactionById(GetTransactionByIdRequest) returns (GetTransactionByIdRequest);
}

message GetTransactionByIdRequest {
  squzy.v1.monitoring.TransactionInfo transaction = 1;
  repeated squzy.v1.monitoring.TransactionInfo children = 2;
}

message GetTransactionByNameRequest {
  string application_id = 1;
  string transaction_name = 2;
  Pagination pagination = 3;
  TimeFilter time_range = 4;
}

message GetTransactionByNameResponse {
  int64 count = 1;
  repeated squzy.v1.monitoring.TransactionInfo transactions = 2;
}

message GetTransactionByIdRequest {
  string transaction_id = 1;
}

message GetTransactionsResponse {
  int64 count = 1;
  repeated squzy.v1.monitoring.TransactionInfo transactions = 2;
}

message GetTransactionsRequest {
  string application_id = 1; // if empty then ignore
  Pagination pagination = 2;
  TimeFilter time_range = 3;
  squzy.v1.monitoring.TransactionType type = 4;
  HostFilter host = 5;
  NameFilter name = 6;
  PathFilter path = 7;
  MethodFilter method = 8;
  SortTransactionList sort = 9;
  message HostFilter {
    string host = 1;
  }
  message NameFilter {
    string name = 1;
  }
  message PathFilter {
    string path = 1;
  }
  message MethodFilter {
    string method = 1;
  }
}

message SortingTransactionList {
  SortTransactionList sort_by = 1;
  SortDirection direction = 2;
}

enum SortTransactionList {
  SORT_TRANSACTION_LIST_UNSPECIFIED = 0;
  DURATION = 1;
}

enum SortTransactionGroup {
  SORT_TRANSACTION_GROUP_UNSPECIFIED = 0;
  AVERAGE_TIME = 1;
  COUNT = 2;
  CONSUMING_TIME = 3;
}

enum SortDirection {
  SORT_DIRECTION_UNSPECIFIED = 0;
  ASC = 1;
  DESC = 2;
}

enum GroupTransaction {
  GROUP_TRANSACTION_UNSPECIFIED = 0;
  BY_TYPE = 1;
  BY_NAME = 2;
  BY_METHOD = 3;
  BY_HOST = 4;
  BY_PATH = 5;
}

enum TypeAgentStat {
  AGENT_STATS_TYPE_UNSPECIFIED = 0;
  ALL = 1;
  CPU = 2;
  DISK = 3;
  MEMORY = 4;
  NET = 5;
}

enum SchedulerCode {
  SCHEDULER_CODE_UNSPECIFIED = 0;
  OK = 1;
  ERROR = 2;
}

message GetTransactionGroupRequest {
  string application_id = 1;
  Pagination pagination = 2; // if nil means all record
  TimeFilter time_range = 3; // nil not set (filter by start time)
  GroupTransaction group_type  = 4; // how we will group transactions
  squzy.v1.monitoring.TransactionType type = 5;
  squzy.v1.monitoring.TransactionStatus status = 6;
  SortingGroupTransaction sort = 7;
}

message SortingGroupTransaction {
  SortTransactionGroup sort_by = 1;
  SortDirection direction = 2;
}

message TransactionGroup {
  int64 count = 1;
  double average_time = 2;
}

message GetTransactionGroupResponse {
  map<string,TransactionGroup> transactions = 1;
}

message SchedulerResponse {
  string scheduler_id = 1;
  SchedulerSnapshot snapshot = 2;
}

message SchedulerSnapshot {
  message Error {
    string message = 1;
  }
  message MetaData {
    google.protobuf.Timestamp start_time = 1;
    google.protobuf.Timestamp end_time = 2;
    google.protobuf.Value value = 3;
  }
  SchedulerCode code = 2;
  squzy.v1.monitoring.SchedulerType type = 3;
  Error error = 4;
  MetaData meta = 5;
}

message TimeFilter {
  google.protobuf.Timestamp from = 1; // nil = not set start time
  google.protobuf.Timestamp to = 2; // nil = not set end time
}

message Pagination {
  int32 page = 1; // default 0
  int32 limit = 2; // default 20
}

message GetSchedulerInformationRequest {
  string scheduler_id = 1;
  Pagination pagination = 2; // if nil means all record
  TimeFilter time_range = 3; // nil not set (filter by start time)
}

message GetSchedulerInformationResponse {
  repeated SchedulerSnapshot snapshots = 1;
  int32 count = 2;
}

message GetAgentInformationRequest {
  string agent_id = 1;
  TypeAgentStat type = 2;
  Pagination pagination = 3; // nil no pagination
  TimeFilter time_range = 4; // nil not set (filter by timestamp)
}

message GetAgentInformationResponse {
  repeated Statistic stats = 1;
  int32 count = 2;
  message Statistic {
    google.protobuf.Timestamp time = 1;
    squzy.v1.agent.CpuInfo cpu_info = 2;
    squzy.v1.agent.MemoryInfo memory_info = 3;
    squzy.v1.agent.DiskInfo disk_info = 4;
    squzy.v1.agent.NetInfo net_info = 5;
  }
}
