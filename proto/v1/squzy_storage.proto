syntax = 'proto3';

package squzy.v1.storage;

option go_package = "api";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "proto/v1/squzy_monitoring.proto";
import "proto/v1/squzy_agent_server.proto";
import "google/protobuf/empty.proto";

enum SchedulerResponseCode {
    OK = 0;
    Error = 1;
}

service Storage {
    //To save info about checkers
    rpc SendResponseFromScheduler (SchedulerResponse) returns (google.protobuf.Empty);
    //To save info about agent
    rpc SendResponseFromAgent (squzy.v1.agent.Metric) returns (google.protobuf.Empty);
    //To send info about checkers
    rpc GetSchedulerInformation (GetSchedulerInformationRequest) returns (GetSchedulerInformationResponse);
    //To send info about about agent
    rpc GetAgentInformation (GetAgentInformationRequest) returns (GetAgentInformationResponse);
}

enum TypeAgentStat {
    ALL = 0;
    CPU = 1;
    DISK = 2;
    MEMORY = 3;
    NET = 4;
}

enum SchedulerCode {
    OK = 0;
    Error = 1;
}

message SchedulerResponse {
    string schedulerId = 1;
    SchedulerSnapshot snapshot = 2;
}

message SchedulerSnapshot {
    message Error {
        string message = 1;
    }
    message MetaData {
        google.protobuf.Timestamp startTime = 1;
        google.protobuf.Timestamp endTime = 2;
        google.protobuf.Value value = 3;
    }
    SchedulerCode code = 2;
    squzy.v1.monitoring.SchedulerType type = 3;
    Error error = 4;
    MetaData meta = 5;
}

message TimeFilter {
    google.protobuf.Timestamp from = 1; // nil = not set start time
    google.protobuf.Timestamp to = 2; // nil = not set end time
}

message Pagination {
    int32 page = 1; // default 0
    int32 limit = 2; // default 20
}

message GetSchedulerInformationRequest {
    string schedulerId = 1;
    Pagination pagination = 2; // if nil means all record
    TimeFilter time_range = 3; // nil not set (filter by start time)
}

message GetSchedulerInformationResponse {
    repeated SchedulerSnapshot snapshots = 1;
}

message GetAgentInformationRequest {
    string agentId = 1;
    TypeAgentStat type = 2;
    Pagination pagination = 3; // nil no pagination
    TimeFilter time_range = 4; // nil not set (filter by timestamp)
}

message GetAgentInformationResponse {
    repeated Statistic stats = 1;
    message Statistic {
        squzy.v1.agent.CpuInfo cpu_info = 1;
        squzy.v1.agent.MemoryInfo memory_info = 2;
        squzy.v1.agent.DiskInfo disk_info = 3;
        squzy.v1.agent.NetInfo net_info = 4;
    }
}
