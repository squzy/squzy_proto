syntax = 'proto3';

package squzy.v1.storage;

option go_package="api";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "proto/v1/squzy_monitoring.proto";
import "proto/v1/squzy_agent_server.proto";
import "google/protobuf/empty.proto";

enum SchedulerResponseCode {
    OK = 0;
    Error = 1;
}

service Storage {
    //To save info about checkers
    rpc SendResponseFromScheduler (SchedulerResponse) returns (google.protobuf.Empty);
    //To save info about agent
    rpc SendResponseFromAgent(squzy.v1.agent.Metric) returns (google.protobuf.Empty);
    //To send info about checkers
    rpc GetSchedulerInformation(GetSchedulerInformationRequest) returns (GetSchedulerInformationResponse);
    //To send info about about agent
    rpc GetAgentInformation(GetAgentInformationRequest) returns (squzy.v1.agent.SendMetricsRequest);
}

message SchedulerResponse {
    string schedulerId = 1;
    Snapshot snapshot = 2;
}

message Snapshot {
    enum Code {
        OK = 0;
        Error = 1;
    }
    message SnapshotError {
        string message = 1;
    }
    message MetaData {
        google.protobuf.Timestamp startTime = 1;
        google.protobuf.Timestamp endTime = 2;
        google.protobuf.Value value = 3;
    }
    Code code = 2;
    squzy.v1.monitoring.SchedulerType type = 3;
    SnapshotError error = 4;
    MetaData meta = 5;
}

message SendResponseFromSchedulerRequest {
    oneof config {
        string okResult = 1;
        StrorageError error = 2;
    }
}

message StrorageError {
    string description = 1;
}

message SendResponseFromAgentResponse{
    oneof config {
        string okResult = 1;
        StrorageError error = 2;
    }
}

message GetSchedulerInformationRequest{
    string schedulerId = 1;
}

message GetSchedulerInformationResponse {
    repeated Snapshot snapshots = 1;
}

message GetAgentInformationRequest{
    string agentId = 1;
}
