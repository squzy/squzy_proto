syntax = 'proto3';

package squzy.v1.monitoring;


import "google/protobuf/empty.proto";

option go_package = "api";
// Squzy Monitoring service for periodic execute schedulers

service SchedulersExecutor {
  // protolint:disable:next MAX_LINE_LENGTH
  rpc GetSchedulerList (google.protobuf.Empty) returns (GetSchedulerListResponse);
  rpc GetSchedulerById (GetSchedulerByIdRequest) returns (Scheduler);
  rpc Add (AddRequest) returns (AddResponse);
  rpc Remove (RemoveRequest) returns (RemoveResponse);
  rpc Run (RunRequest) returns (RunResponse);
  rpc Stop (StopRequest) returns (StopResponse);
}

enum SchedulerStatus {
  // Initial status
  SCHEDULER_STATUS_UNSPECIFIED = 0;

  RUNNED = 1;
  STOPPED = 2;
  REMOVED = 3;
}

enum SchedulerType {
  // Initial status
  SCHEDULER_TYPE_UNSPECIFIED = 0;

  TCP = 1;
  GRPC = 2;
  HTTP = 3;
  SITE_MAP = 4;
  HTTP_JSON_VALUE = 5;
}

message GetSchedulerByIdRequest {
  string id = 1;
}

message Scheduler {
  string id = 1;
  SchedulerType type = 2;
  SchedulerStatus status = 3;
  // How often we need execute check
  int32 interval = 4;
  // Timeout for check request
  int32 timeout = 5;
  // Config of the scheduler;
  oneof config {
    TcpConfig tcp = 6;
    SiteMapConfig sitemap = 7;
    GrpcConfig grpc = 8;
    HttpConfig http = 9;
    HttpJsonValueConfig http_value = 10;
  }
}

message GetSchedulerListResponse {
  repeated Scheduler lists = 1;
}

message SiteMapConfig {
  string url = 1;
  int32 concurrency = 2;
}

message TcpConfig {
  string host = 1;
  int32 port = 2;
}

message GrpcConfig {
  string service = 1;
  string host = 2;
  int32 port = 3;
}

message HttpConfig {
  string method = 1;
  string url = 2;
  map<string, string> headers = 3;
  int32 status_code = 4;
}

message HttpJsonValueConfig {
  string method = 1;
  string url = 2;
  map<string, string> headers = 3;
  repeated Selectors selectors = 4;
  enum JsonValueParseType {
    // Initial status
    JSON_PARSE_VALUE_UNSPECIFIED = 0;
    STRING = 1;
    BOOL = 2;
    NUMBER = 3;
    TIME = 4;
    ANY = 5;
    RAW = 6;
  }
  message Selectors {
    JsonValueParseType type = 1;
    string path = 2;
  }
}

message AddRequest {
  // How often we need execute check
  int32 interval = 1;
  // Timeout for check request
  int32 timeout = 2;
  oneof config {
    TcpConfig tcp = 3;
    SiteMapConfig sitemap = 4;
    GrpcConfig grpc = 5;
    HttpConfig http = 6;
    HttpJsonValueConfig http_value = 7;
  }
}

message AddResponse {
  string id = 1;
}

message RemoveRequest {
  string id = 1;
}

message RemoveResponse {
  string id = 1;
}

message RunRequest {
  string id = 1;
}

message StopRequest {
  string id = 1;
}

message RunResponse {
  string id = 1;
}

message StopResponse {
  string id = 1;
}