syntax = 'proto3';

package squzy.v1.agent;

option go_package = "api";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service AgentServer {
    rpc Register (RegisterRequest) returns (RegisterResponse);
    rpc GetByAgentName (GetByAgentNameRequest) returns (GetAgentListResponse);
    rpc UnRegister (UnRegisterRequest) returns (UnRegisterResponse);
    rpc GetAgentList (google.protobuf.Empty) returns (GetAgentListResponse);
    rpc SendMetrics (stream SendMetricsRequest) returns (google.protobuf.Empty);
}

message SendMetricsRequest {
    // generated by server
    string agentId = 1;
    // Should be set by user from env var
    string agentUniqName = 2;
    CpuInfo cpu_info = 3;
    MemoryInfo memory_info = 4;
    DiskInfo disk_info = 5;
    NetInfo net_info = 6;
    google.protobuf.Timestamp time = 7;
}

message CpuInfo {
    message CPU {
        double load = 1;
    }
    repeated CPU cpus = 1;
}

message MemoryInfo {
    message Memory {
        uint64 total = 1;
        uint64 used = 2;
        uint64 free = 3;
        uint64 shared = 4;
        double usedPercent = 5;
    }
    Memory mem = 1;
    Memory swap = 2;
}

message DiskInfo {
    message Disk {
        uint64 total = 1;
        uint64 free = 2;
        uint64 used = 3;
        double usedPercent = 4;
    }
    map<string, Disk> disks = 1;
}

message NetInfo {
    message Interface {
        uint64 bytesSent = 1;
        uint64 bytesRecv = 2;
        uint64 packetsSent = 3;
        uint64 packetsRecv = 4;
        // total number of errors while receiving
        uint64 errIn = 5;
        // total number of errors while sending
        uint64 errOut = 6;
        // total number of incoming packets which were dropped
        uint64 dropIn = 7;
        // total number of outgoing packets which were dropped (always 0 on OSX and BSD)
        uint64 dropOut = 8;
    }
    map<string, Interface> interfaces = 1;
}

enum AgentStatus {
    // Agent is runned but not send stat yet
    REGISTRED = 0;
    // Actually send stat
    RUNNED = 1;
    // Stopped to send stat
    DISCONNECTED = 2;
    // Unregistred
    UNREGISTRED = 3;
}

message GetByAgentNameRequest {
    string agentName = 1;
}

message GetAgentListResponse {
    repeated AgentItem agents = 1;
}

message UnRegisterRequest {
    string id = 1;
}

message UnRegisterResponse {
    string id = 1;
}

message RegisterRequest {
    // Name form env
    string agentName = 1;
    HostInfo hostInfo = 2;
}

message AgentItem {
    string id = 1;
    string agentName = 2;
    AgentStatus status = 3;
}

message HostInfo {
    string host_name = 1;
    string os = 2;
    PlatformInfo platform_info = 3;
}

message PlatformInfo {
    string name = 1;
    string family = 2;
    string version = 3;
}

message RegisterResponse {
    string id = 1;
}